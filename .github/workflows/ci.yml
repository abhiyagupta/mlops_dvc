# name of my workflow
name: Python CI/CD application

# events 
on:
  workflow_dispatch:
  # push to main
  push:
   #branches: [ "hyperparam" ]

permissions:
  contents: read


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}



# groups set of actions that needs to execute
jobs:

  test:
    env:
      # don't expose kaggle API key 😠, using secrets here 🤐
      username: ${{ secrets.USERNAME }}
      key: ${{ secrets.KEY }}


    runs-on: ubuntu-latest
  
    steps:
    - name: checking kaggle key as env secrets
      run: |
        echo "username: ${{ env.USERNAME }}"
        echo "key: ${{ env.KEY }}"

    - uses: actions/checkout@v4

    # install deps
    - name: Set requirements
      # run: pip install -r requirements.txt
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest coverage      

    # finetune trainer.max_epochs=2 (default)
    - name: RUN finetune script
      run: python src/train.py experiment=finetune

    - name: save artifact
      uses: actions/upload-artifact@v3
      # artifacts for loguru+ckpt
      with:
        name: artifacts
        path: |
          logs
          outputs/*/*/checkpoints/*.ckpt

    - name: Run inference
      run: python src/infer.py

    - name: Upload inference results
      uses: actions/upload-artifact@v3
      with:
        name: inference-results
        path: validation_results
    - name: Run tests with coverage
      run: |
        coverage run -m pytest
        coverage xml
        coverage html

    - name: Debug coverage
      run: |
        pwd
        ls -la
        coverage debug sys
        coverage debug data


    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          .coverage
          coverage.xml
          htmlcov

    - name: Generate plots
      run: |
          python scripts/generate_plots.py

    - name: Generate results table and plots
        run: |
          python scripts/generate_results.py

    - name: Run optimized training
      run: |
          python scripts/train_optimized.py

    - name: Create CML report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          echo "# Hyperparameter Optimization Results" >> report.md
          
          echo "### Combined Metrics Plot" >> report.md
          echo "![Combined Metrics Plot](./combined_metrics_plot.png)" >> report.md

          echo "### Best Hyperparameters" >> report.md
          cat optimization_results.md >> report.md

          echo "### Hyperparameters for Each Experiment" >> report.md
          cat hyperparameters_table.md >> report.md

          echo "### Test Accuracy Across Experiments (Step-wise)" >> report.md
          echo "![Test Accuracy Plot (Step-wise)](./test_accuracy_plot_step.png)" >> report.md

          echo "### Test Accuracy Across Experiments (Epoch-wise)" >> report.md
          echo "![Test Accuracy Plot (Epoch-wise)](./test_accuracy_plot_epoch.png)" >> report.md
        
          cml comment create report.md       

  # build-and-push-image:
  #   # execute job in sequence
  #   needs: test
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Log in to the Container registry
  #     uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
  #     with:
  #       registry: ${{ env.REGISTRY }}
  #       username: ${{ github.actor }}
  #       password: ${{ secrets.GITHUB_TOKEN }}

  #   - name: Extract metadata (tags, labels) for Docker
  #     id: meta
  #     uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
  #     with:
  #       images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #       tags: |
  #         type=raw,value=learn-ci
  #         type=sha

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
  #     with:
  #       context: .
  #       push: true
  #       tags: ${{ steps.meta.outputs.tags }}
  #       labels: ${{ steps.meta.outputs.labels }}
