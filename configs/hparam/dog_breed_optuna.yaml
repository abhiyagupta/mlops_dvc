# @package _global_

defaults:
  - override /hydra/sweeper: optuna

#optimized_metric: "val/acc_best"
# We want to optimize for the highest test accuracy
optimization_metric: "test/acc_best"

# Override the experiment name
experiment_name: "dog_breed_hparam_optimization"


hydra:
  sweeper:
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 123
      n_startup_trials: 3
    direction: maximize
    study_name: dog_breed_hparam_optimization
    storage: null
    n_trials: 10
    n_jobs: 1

    # Define the hyperparameters to optimize
    params:
      model.lr: loguniform(1e-5, 1e-1)
      model.weight_decay: uniform(0, 0.1)
      model.dropout_rate: uniform(0, 0.5)
      model.n_layers: choice(18, 34, 50, 101, 152)

    # params:
    #   model.patch_size: choice(8, 16, 32)
    #   model.embed_dim: choice(16, 32, 48)
    #   model.num_heads: choice(2, 4, 8)
    #   model.mlp_ratio: interval(2.0, 4.0)

# Other configurations
data:
  batch_size: 64

model:
  base_model: resnet18
  pretrained: False
  num_classes: 10
  lr: 1e-3

trainer:
  min_epochs: 1
  max_epochs: 2






# hydra:
#   mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

#   sweeper:
#     _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

 
#     storage: null

#     # name of the study to persist optimization results
#     study_name: null

#     # number of parallel workers
#     n_jobs: 1

#     # 'minimize' or 'maximize' the objective
#     direction: maximize

#     # total number of runs that will be executed
#     n_trials: 10

   
#     sampler:
#       _target_: optuna.samplers.TPESampler
#       seed: 1234
#       n_startup_trials: 3 # number of random sampling runs before optimization starts

#     # define hyperparameter search space
#     params:
#       # model.lr: interval(1e-5, 1e-2)
#       # model.weight_decay: interval(1e-6, 1e-4)
#       # data.batch_size: choice(32, 64, 128)
#       # model.embed_dim: choice(16, 32, 48)
#       # model.depth: choice(4, 8)
#       # model.num_heads: choice(2, 4)
#       # model.mlp_ratio: interval(2, 4)

#       model.patch_size: choice(8, 16, 32)
#       model.embed_dim: choice(16, 32, 48)
#       model.num_heads: choice(2, 4, 8)
#       model.mlp_ratio: interval(2.0, 4.0)

